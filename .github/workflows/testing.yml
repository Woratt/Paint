name: Test Paint

permissions:
  contents: write

on: push

jobs:
  build-macOS:
    runs-on: macos-latest
    steps:
      - name: Get repository code 
        uses: actions/checkout@v3

      - name: Install dependencies 
        run: |
          brew update
          brew install cmake qt

      - name: Configure CMake
        run: |
          cmake -S . -B build -DCMAKE_PREFIX_PATH=$(brew --prefix qt)

      - name: Build project
        run: |
          cmake --build build -- -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)

      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Get repository code 
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qt6-base-dev qt6-tools-dev cmake build-essential

      - name: Configure CMake
        run: |
          cmake -S . -B build
      
      - name: Build project
        run: |
          cmake --build build -- -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)

      - name: Run tests
        run: |
          export QT_QPA_PLATFORM=offscreen
          ctest --output-on-failure --test-dir build

  build-windows:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get all tags for correct version determination
        run: git fetch --all --tags -f

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: 6.6.1
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          dir: ${{ runner.temp }}
          modules: qtcharts qt3d  # Додайте потрібні модулі
          setup-python: false

      - name: Download JOM for parallel builds
        uses: suisei-cn/actions-download-file@v1
        with:
          url: http://download.qt.io/official_releases/jom/jom.zip
          target: ${{ runner.temp }}\

      - name: Unzip JOM
        working-directory: ${{ runner.temp }}
        run: 7z x jom.zip -ojom

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Configure with qmake (замість CMake)
        run: |
          qmake -r ${{ github.workspace }}\planets-qml.pro  # Змініть на ваш .pro файл
        working-directory: ${{ runner.temp }}

      - name: Build with JOM
        run: |
          ${{ runner.temp }}\jom\jom -j2
        working-directory: ${{ runner.temp }}

      - name: Run tests
        run: |
          cd release
          planets-qml.exe --test  # Або ваша команда для запуску тестів
        working-directory: ${{ runner.temp }}

  slang-format:
    runs-on: macos-latest
    steps:
      - name: Get repository code 
        uses: actions/checkout@v3

      - name: Install slang-format
        run: |
          brew update
          brew install clang-format

      - name: Run clang-format (fix)
        run: |
          clang-format -i $(find . -type f \( -name "*.cpp" -o -name "*.h" \))

      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add .
          git commit -m "Apply clang-format fixes" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref }}